<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcc.vacation.domain.vacationrequest.mapper.VacationRequestMapper">

    <resultMap id="VacationRequestDetailResultMap" type="VacationRequestList">
        <!-- Vacation_request 테이블의 컬럼들 -->
        <id column="id" property="id"/>
        <result column="reg_date" property="regDate"/>
        <result column="started_date" property="startedDate"/>
        <result column="end_date" property="endDate"/>
        <result column="file_path" property="filePath"/>
        <result column="approve_date" property="approveDate"/>
        <result column="status" property="status"/>
        <result column="comments" property="comments"/>
        <result column="type_id" property="typeId"/>
        <result column="emp_id" property="empId"/>

        <!-- Employee 테이블에서 사원의 이름을 가져옴 -->
        <result column="employee_name" property="employeeName"/>

        <!-- Approver 테이블의 컬럼들 -->
        <result column="top_approver" property="topApprover"/>
        <result column="first_approver" property="firstApprover"/>
        <result column="second_approver" property="secondApprover"/>
        <result column="top_status" property="topStatus"/>
        <result column="first_status" property="firstStatus"/>
        <result column="second_status" property="secondStatus"/>
    </resultMap>

    <resultMap id="MyVacationsResultMap" type="MyVacation">
        <id column="id" property="vacationId"/>
        <result column="started_date" property="start"/>
        <result column="end_date" property="end"/>
        <result column="approve_date" property="approvedDate"/>
        <result column="status" property="status"/>
        <result column="name" property="title"/>
        <result column="vacation_days" property="vacationDays"/>
    </resultMap>

    <resultMap id="MyApproverResultMap" type="Approver">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="authority" property="authority"/>
    </resultMap>

    <resultMap id="ReqCancelResultMap" type="VacationReqNCancel">
        <id column="id" property="id"/>
        <result column="started_date" property="startedDate"/>
        <result column="end_date" property="endDate"/>
        <result column="status" property="status"/>
        <result column="name" property="name"/>
        <result column="status" property="cancelStatus"/>
        <result column="comments" property="cancelComments"/>
        <result column="cancel_approve_date" property="cancelApproveDate"/>
        <result column="cancel_approver_id" property="cancelApproverId"/>
    </resultMap>

    <!--  client 휴가신청 및 취소신청 리스트   -->
    <select id="getClientReqList" resultMap="ReqCancelResultMap">
        SELECT vr.id, vr.started_date, vr.end_date, vr.status, vt.name, vc.status, vc.comments, vc.cancel_approve_date, vc.cancel_approver_id
        FROM vacation_request vr LEFT JOIN vacation_type vt
            ON vr.type_id = vt.id
                LEFT JOIN vacation_cancel vc
             ON vr.id = vc.vacation_request_id
        WHERE vr.started_date >= systimestamp AND vr.emp_id = #{employeeId}
    </select>

    <select id="getByAuthority" resultType="Approver">
        select id, name, authority
        from employee
        where authority = #{authority}
    </select>

    <select id="getMyApprover" resultMap="MyApproverResultMap">
        select id, name, authority
        from employee
        where dept_id IN (select f.id
                          from department my
                                   JOIN department f ON my.upper_dept_id = f.id
                          where my.id = #{myDeptId}
                          UNION
                          select f.upper_dept_id
                          from department my
                                   JOIN department f ON my.upper_dept_id = f.id
                          where my.id = #{myDeptId}
                          UNION
                          select id
                          from department
                          where id = #{myDeptId})
    </select>

    <!-- 모든 휴가 요청 조회 -->
    <!--    승인 권한이 있는 휴가 요청만 조회-->
    <select id="getVacationRequestListByApproverId" resultMap="VacationRequestDetailResultMap">
        SELECT
            vr.id,
            vr.reg_date,
            vr.started_date,
            vr.end_date,
            vr.file_path,
            vr.approve_date,
            vr.status,
            vr.comments,
            vr.type_id,
            vr.emp_id,
            e.name AS employee_name,
            ap.top_approver,
            ap.first_approver,
            ap.second_approver,
            ap.top_status,
            ap.first_status,
            ap.second_status
        FROM
            Vacation_request vr
                JOIN Approver ap ON vr.id = ap.id
                JOIN Employee e ON vr.emp_id = e.id
        WHERE
            (
                (ap.first_approver = #{approverId})
                    OR
                (ap.second_approver = #{approverId})
                    OR
                (ap.top_approver = #{approverId})
                )
    </select>




    <!--    관리자용 휴가 승인-->
    <update id="approveVacation">
        UPDATE Approver
        SET
            top_status = CASE WHEN top_approver = #{approverId} THEN 'TRUE' ELSE top_status END,
            first_status = CASE WHEN first_approver = #{approverId} THEN 'TRUE' ELSE first_status END,
            second_status = CASE WHEN second_approver = #{approverId} THEN 'TRUE' ELSE second_status END
        WHERE id = #{requestId}
    </update>

    <!--    관리자용 휴가 거절-->
    <!-- Approver 테이블의 상태를 FALSE로 설정 -->
    <update id="rejectVacationFALSE">
        UPDATE Approver
        SET
            top_status = CASE WHEN top_approver = #{approverId} THEN 'FALSE' ELSE top_status END,
            first_status = CASE WHEN first_approver = #{approverId} THEN 'FALSE' ELSE first_status END,
            second_status = CASE WHEN second_approver = #{approverId} THEN 'FALSE' ELSE second_status END
        WHERE id = #{requestId}
    </update>

    <!-- Vacation_request 테이블에서 commentsOfApprover와 status를 업데이트 -->
    <update id="rejectVacationSTATUS">
        UPDATE Vacation_request
        SET
            commentsOfApprover = #{commentsOfApprover},
            status = '거절'
        WHERE id = #{requestId}
    </update>





    <select id="getMyVacations" resultMap="MyVacationsResultMap">
        SELECT vr.id, vr.started_date, vr.end_date, vr.approve_date, vr.status, vt.name, e.vacation_days
        FROM employee e
                 JOIN vacation_request vr
                      ON e.id = vr.emp_id
                 JOIN vacation_type vt
                      ON vr.type_id = vt.id
        WHERE e.id = #{employeeId}
    </select>

    <insert id="insertVacationRequest" parameterType="MyVacationRequest">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT vacation_request_seq.nextval FROM dual
        </selectKey>
        INSERT INTO vacation_request (id, reg_date, started_date, end_date, file_path, approve_date, status, comments,
        type_id, emp_id)
        VALUES (
        #{id},
        systimestamp,
        #{startedDate,jdbcType=TIMESTAMP},
        #{endedDate,jdbcType=TIMESTAMP},
        #{filePath, jdbcType=VARCHAR},
        #{approveDate,jdbcType=TIMESTAMP},
        #{status, jdbcType=VARCHAR},
        #{comments, jdbcType=VARCHAR},
        #{typeId},
        #{empId})
    </insert>

    <insert id="insertApprover" parameterType="MyVacationApprover">
        INSERT INTO approver(id, top_approver, first_approver, second_approver)
        VALUES (#{id}, #{topApprover, jdbcType=VARCHAR}, #{firstApprover, jdbcType=VARCHAR}, #{secondApprover, jdbcType=VARCHAR})
    </insert>

</mapper>